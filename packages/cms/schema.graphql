# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type SystemUser {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SystemUserWhereUniqueInput {
  id: ID
  email: String
}

input SystemUserWhereInput {
  AND: [SystemUserWhereInput!]
  OR: [SystemUserWhereInput!]
  NOT: [SystemUserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SystemUserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SystemUserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SystemUserUpdateArgs {
  where: SystemUserWhereUniqueInput!
  data: SystemUserUpdateInput!
}

input SystemUserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Selected {
  id: ID!
  legislator: Legislator
  topic: Topic
  order: Int
  labelField: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SelectedWhereUniqueInput {
  id: ID
}

input SelectedWhereInput {
  AND: [SelectedWhereInput!]
  OR: [SelectedWhereInput!]
  NOT: [SelectedWhereInput!]
  id: IDFilter
  legislator: LegislatorWhereInput
  topic: TopicWhereInput
  order: IntFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input SelectedOrderByInput {
  id: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SelectedUpdateInput {
  legislator: LegislatorRelateToOneForUpdateInput
  topic: TopicRelateToOneForUpdateInput
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorRelateToOneForUpdateInput {
  create: LegislatorCreateInput
  connect: LegislatorWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToOneForUpdateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
  disconnect: Boolean
}

input SelectedUpdateArgs {
  where: SelectedWhereUniqueInput!
  data: SelectedUpdateInput!
}

input SelectedCreateInput {
  legislator: LegislatorRelateToOneForCreateInput
  topic: TopicRelateToOneForCreateInput
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorRelateToOneForCreateInput {
  create: LegislatorCreateInput
  connect: LegislatorWhereUniqueInput
}

input TopicRelateToOneForCreateInput {
  create: TopicCreateInput
  connect: TopicWhereUniqueInput
}

type Speech {
  id: ID!
  legislativeMeeting: LegislativeMeeting
  legislativeMeetingSession: LegislativeMeetingSession
  legislativeYuanMember: LegislativeYuanMember
  date: CalendarDay
  title: String
  slug: String
  summary: JSON
  content: JSON
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SpeechWhereUniqueInput {
  id: ID
  slug: String
}

input SpeechWhereInput {
  AND: [SpeechWhereInput!]
  OR: [SpeechWhereInput!]
  NOT: [SpeechWhereInput!]
  id: IDFilter
  legislativeMeeting: LegislativeMeetingWhereInput
  legislativeMeetingSession: LegislativeMeetingSessionWhereInput
  legislativeYuanMember: LegislativeYuanMemberWhereInput
  date: CalendarDayFilter
  title: StringFilter
  slug: StringFilter
  attendee: StringFilter
  ivodLink: StringFilter
  ivodStartTime: StringFilter
  ivodEndTime: StringFilter
  topics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CalendarDayFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayFilter
}

input TopicManyRelationFilter {
  every: TopicWhereInput
  some: TopicWhereInput
  none: TopicWhereInput
}

input SpeechOrderByInput {
  id: OrderDirection
  date: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  attendee: OrderDirection
  ivodLink: OrderDirection
  ivodStartTime: OrderDirection
  ivodEndTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SpeechUpdateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForUpdateInput
  legislativeYuanMember: LegislativeYuanMemberRelateToOneForUpdateInput
  date: CalendarDay
  title: String
  slug: String
  summary: JSON
  content: JSON
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics: TopicRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingRelateToOneForUpdateInput {
  create: LegislativeMeetingCreateInput
  connect: LegislativeMeetingWhereUniqueInput
  disconnect: Boolean
}

input LegislativeMeetingSessionRelateToOneForUpdateInput {
  create: LegislativeMeetingSessionCreateInput
  connect: LegislativeMeetingSessionWhereUniqueInput
  disconnect: Boolean
}

input LegislativeYuanMemberRelateToOneForUpdateInput {
  create: LegislativeYuanMemberCreateInput
  connect: LegislativeYuanMemberWhereUniqueInput
  disconnect: Boolean
}

input TopicRelateToManyForUpdateInput {
  disconnect: [TopicWhereUniqueInput!]
  set: [TopicWhereUniqueInput!]
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

input SpeechUpdateArgs {
  where: SpeechWhereUniqueInput!
  data: SpeechUpdateInput!
}

input SpeechCreateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForCreateInput
  legislativeYuanMember: LegislativeYuanMemberRelateToOneForCreateInput
  date: CalendarDay
  title: String
  slug: String
  summary: JSON
  content: JSON
  attendee: String
  ivodLink: String
  ivodStartTime: String
  ivodEndTime: String
  topics: TopicRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingRelateToOneForCreateInput {
  create: LegislativeMeetingCreateInput
  connect: LegislativeMeetingWhereUniqueInput
}

input LegislativeMeetingSessionRelateToOneForCreateInput {
  create: LegislativeMeetingSessionCreateInput
  connect: LegislativeMeetingSessionWhereUniqueInput
}

input LegislativeYuanMemberRelateToOneForCreateInput {
  create: LegislativeYuanMemberCreateInput
  connect: LegislativeYuanMemberWhereUniqueInput
}

input TopicRelateToManyForCreateInput {
  create: [TopicCreateInput!]
  connect: [TopicWhereUniqueInput!]
}

type Topic {
  id: ID!
  title: String
  slug: String
  speeches(where: SpeechWhereInput! = {}, orderBy: [SpeechOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeechWhereUniqueInput): [Speech!]
  speechesCount(where: SpeechWhereInput! = {}): Int
  relatedTopics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  relatedTopicsCount(where: TopicWhereInput! = {}): Int
  referencedByTopics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  referencedByTopicsCount(where: TopicWhereInput! = {}): Int
  relatedTwreporterArticles: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input TopicWhereUniqueInput {
  id: ID
  slug: String
}

input TopicWhereInput {
  AND: [TopicWhereInput!]
  OR: [TopicWhereInput!]
  NOT: [TopicWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  speeches: SpeechManyRelationFilter
  relatedTopics: TopicManyRelationFilter
  referencedByTopics: TopicManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SpeechManyRelationFilter {
  every: SpeechWhereInput
  some: SpeechWhereInput
  none: SpeechWhereInput
}

input TopicOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TopicUpdateInput {
  title: String
  slug: String
  speeches: SpeechRelateToManyForUpdateInput
  relatedTopics: TopicRelateToManyForUpdateInput
  referencedByTopics: TopicRelateToManyForUpdateInput
  relatedTwreporterArticles: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeechRelateToManyForUpdateInput {
  disconnect: [SpeechWhereUniqueInput!]
  set: [SpeechWhereUniqueInput!]
  create: [SpeechCreateInput!]
  connect: [SpeechWhereUniqueInput!]
}

input TopicUpdateArgs {
  where: TopicWhereUniqueInput!
  data: TopicUpdateInput!
}

input TopicCreateInput {
  title: String
  slug: String
  speeches: SpeechRelateToManyForCreateInput
  relatedTopics: TopicRelateToManyForCreateInput
  referencedByTopics: TopicRelateToManyForCreateInput
  relatedTwreporterArticles: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input SpeechRelateToManyForCreateInput {
  create: [SpeechCreateInput!]
  connect: [SpeechWhereUniqueInput!]
}

type Legislator {
  id: ID!
  name: String
  slug: String
  image: Photo
  imageLink: String
  externalLink: String
  meetingTermCount: Int
  meetingTermCountInfo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislatorWhereUniqueInput {
  id: ID
  slug: String
}

input LegislatorWhereInput {
  AND: [LegislatorWhereInput!]
  OR: [LegislatorWhereInput!]
  NOT: [LegislatorWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: PhotoWhereInput
  imageLink: StringFilter
  externalLink: StringFilter
  meetingTermCount: IntNullableFilter
  meetingTermCountInfo: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input LegislatorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  imageLink: OrderDirection
  externalLink: OrderDirection
  meetingTermCount: OrderDirection
  meetingTermCountInfo: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislatorUpdateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForUpdateInput
  imageLink: String
  externalLink: String
  meetingTermCount: Int
  meetingTermCountInfo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input LegislatorUpdateArgs {
  where: LegislatorWhereUniqueInput!
  data: LegislatorUpdateInput!
}

input LegislatorCreateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForCreateInput
  imageLink: String
  externalLink: String
  meetingTermCount: Int
  meetingTermCountInfo: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

type LegislativeYuanMember {
  id: ID!
  legislator: Legislator
  labelForCMS: String
  party: Party
  legislativeMeeting: LegislativeMeeting
  speeches(where: SpeechWhereInput! = {}, orderBy: [SpeechOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeechWhereUniqueInput): [Speech!]
  speechesCount(where: SpeechWhereInput! = {}): Int
  sessionAndCommittee(where: CommitteeMemberWhereInput! = {}, orderBy: [CommitteeMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeMemberWhereUniqueInput): [CommitteeMember!]
  sessionAndCommitteeCount(where: CommitteeMemberWhereInput! = {}): Int
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  proposalSuccessCount: Int
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeYuanMemberWhereUniqueInput {
  id: ID
}

input LegislativeYuanMemberWhereInput {
  AND: [LegislativeYuanMemberWhereInput!]
  OR: [LegislativeYuanMemberWhereInput!]
  NOT: [LegislativeYuanMemberWhereInput!]
  id: IDFilter
  legislator: LegislatorWhereInput
  labelForCMS: StringFilter
  party: PartyWhereInput
  legislativeMeeting: LegislativeMeetingWhereInput
  speeches: SpeechManyRelationFilter
  sessionAndCommittee: CommitteeMemberManyRelationFilter
  type: StringFilter
  constituency: StringNullableFilter
  city: StringNullableFilter
  tooltip: StringFilter
  note: StringFilter
  proposalSuccessCount: IntNullableFilter
  isActive: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommitteeMemberManyRelationFilter {
  every: CommitteeMemberWhereInput
  some: CommitteeMemberWhereInput
  none: CommitteeMemberWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input LegislativeYuanMemberOrderByInput {
  id: OrderDirection
  labelForCMS: OrderDirection
  type: OrderDirection
  constituency: OrderDirection
  city: OrderDirection
  tooltip: OrderDirection
  note: OrderDirection
  proposalSuccessCount: OrderDirection
  isActive: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeYuanMemberUpdateInput {
  legislator: LegislatorRelateToOneForUpdateInput
  labelForCMS: String
  party: PartyRelateToOneForUpdateInput
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  speeches: SpeechRelateToManyForUpdateInput
  sessionAndCommittee: CommitteeMemberRelateToManyForUpdateInput
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  proposalSuccessCount: Int
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyRelateToOneForUpdateInput {
  create: PartyCreateInput
  connect: PartyWhereUniqueInput
  disconnect: Boolean
}

input CommitteeMemberRelateToManyForUpdateInput {
  disconnect: [CommitteeMemberWhereUniqueInput!]
  set: [CommitteeMemberWhereUniqueInput!]
  create: [CommitteeMemberCreateInput!]
  connect: [CommitteeMemberWhereUniqueInput!]
}

input LegislativeYuanMemberUpdateArgs {
  where: LegislativeYuanMemberWhereUniqueInput!
  data: LegislativeYuanMemberUpdateInput!
}

input LegislativeYuanMemberCreateInput {
  legislator: LegislatorRelateToOneForCreateInput
  labelForCMS: String
  party: PartyRelateToOneForCreateInput
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  speeches: SpeechRelateToManyForCreateInput
  sessionAndCommittee: CommitteeMemberRelateToManyForCreateInput
  type: String
  constituency: String
  city: String
  tooltip: String
  note: String
  proposalSuccessCount: Int
  isActive: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyRelateToOneForCreateInput {
  create: PartyCreateInput
  connect: PartyWhereUniqueInput
}

input CommitteeMemberRelateToManyForCreateInput {
  create: [CommitteeMemberCreateInput!]
  connect: [CommitteeMemberWhereUniqueInput!]
}

type Party {
  id: ID!
  name: String
  slug: String
  image: Photo
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyWhereUniqueInput {
  id: ID
  slug: String
}

input PartyWhereInput {
  AND: [PartyWhereInput!]
  OR: [PartyWhereInput!]
  NOT: [PartyWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  image: PhotoWhereInput
  imageLink: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PartyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  imageLink: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PartyUpdateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForUpdateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PartyUpdateArgs {
  where: PartyWhereUniqueInput!
  data: PartyUpdateInput!
}

input PartyCreateInput {
  name: String
  slug: String
  image: PhotoRelateToOneForCreateInput
  imageLink: String
  createdAt: DateTime
  updatedAt: DateTime
}

type LegislativeMeeting {
  id: ID!
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees(where: CommitteeWhereInput! = {}, orderBy: [CommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeWhereUniqueInput): [Committee!]
  committeesCount(where: CommitteeWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingWhereUniqueInput {
  id: ID
  term: Int
}

input LegislativeMeetingWhereInput {
  AND: [LegislativeMeetingWhereInput!]
  OR: [LegislativeMeetingWhereInput!]
  NOT: [LegislativeMeetingWhereInput!]
  id: IDFilter
  term: IntFilter
  startTime: CalendarDayFilter
  endTime: CalendarDayFilter
  committees: CommitteeManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommitteeManyRelationFilter {
  every: CommitteeWhereInput
  some: CommitteeWhereInput
  none: CommitteeWhereInput
}

input LegislativeMeetingOrderByInput {
  id: OrderDirection
  term: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeMeetingUpdateInput {
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees: CommitteeRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeRelateToManyForUpdateInput {
  disconnect: [CommitteeWhereUniqueInput!]
  set: [CommitteeWhereUniqueInput!]
  create: [CommitteeCreateInput!]
  connect: [CommitteeWhereUniqueInput!]
}

input LegislativeMeetingUpdateArgs {
  where: LegislativeMeetingWhereUniqueInput!
  data: LegislativeMeetingUpdateInput!
}

input LegislativeMeetingCreateInput {
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  committees: CommitteeRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeRelateToManyForCreateInput {
  create: [CommitteeCreateInput!]
  connect: [CommitteeWhereUniqueInput!]
}

type LegislativeMeetingSession {
  id: ID!
  legislativeMeeting: LegislativeMeeting
  labelForCMS: String
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionWhereUniqueInput {
  id: ID
}

input LegislativeMeetingSessionWhereInput {
  AND: [LegislativeMeetingSessionWhereInput!]
  OR: [LegislativeMeetingSessionWhereInput!]
  NOT: [LegislativeMeetingSessionWhereInput!]
  id: IDFilter
  legislativeMeeting: LegislativeMeetingWhereInput
  labelForCMS: StringFilter
  term: IntFilter
  startTime: CalendarDayFilter
  endTime: CalendarDayFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input LegislativeMeetingSessionOrderByInput {
  id: OrderDirection
  labelForCMS: OrderDirection
  term: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input LegislativeMeetingSessionUpdateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForUpdateInput
  labelForCMS: String
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

input LegislativeMeetingSessionUpdateArgs {
  where: LegislativeMeetingSessionWhereUniqueInput!
  data: LegislativeMeetingSessionUpdateInput!
}

input LegislativeMeetingSessionCreateInput {
  legislativeMeeting: LegislativeMeetingRelateToOneForCreateInput
  labelForCMS: String
  term: Int
  startTime: CalendarDay
  endTime: CalendarDay
  createdAt: DateTime
  updatedAt: DateTime
}

type Committee {
  id: ID!
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeWhereUniqueInput {
  id: ID
  slug: String
}

input CommitteeWhereInput {
  AND: [CommitteeWhereInput!]
  OR: [CommitteeWhereInput!]
  NOT: [CommitteeWhereInput!]
  id: IDFilter
  name: StringFilter
  slug: StringFilter
  type: StringNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommitteeOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  type: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CommitteeUpdateInput {
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeUpdateArgs {
  where: CommitteeWhereUniqueInput!
  data: CommitteeUpdateInput!
}

input CommitteeCreateInput {
  name: String
  slug: String
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CommitteeMember {
  id: ID!
  legislativeMeetingSession: LegislativeMeetingSession
  legislativeYuanMember: LegislativeYuanMember
  committee(where: CommitteeWhereInput! = {}, orderBy: [CommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeWhereUniqueInput): [Committee!]
  committeeCount(where: CommitteeWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeMemberWhereUniqueInput {
  id: ID
}

input CommitteeMemberWhereInput {
  AND: [CommitteeMemberWhereInput!]
  OR: [CommitteeMemberWhereInput!]
  NOT: [CommitteeMemberWhereInput!]
  id: IDFilter
  legislativeMeetingSession: LegislativeMeetingSessionWhereInput
  legislativeYuanMember: LegislativeYuanMemberWhereInput
  committee: CommitteeManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input CommitteeMemberOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CommitteeMemberUpdateInput {
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForUpdateInput
  legislativeYuanMember: LegislativeYuanMemberRelateToOneForUpdateInput
  committee: CommitteeRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CommitteeMemberUpdateArgs {
  where: CommitteeMemberWhereUniqueInput!
  data: CommitteeMemberUpdateInput!
}

input CommitteeMemberCreateInput {
  legislativeMeetingSession: LegislativeMeetingSessionRelateToOneForCreateInput
  legislativeYuanMember: LegislativeYuanMemberRelateToOneForCreateInput
  committee: CommitteeRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type ImportRecord {
  id: ID!
  recordName: String
  uploadData: UploaderOutput
  recordCount: Int
  importer: SystemUser
  createdAt: DateTime
  updatedAt: DateTime
}

type UploaderOutput {
  listName: ListNameOutputEnum
  csvData: JSON
}

enum ListNameOutputEnum {
  Legislator
  Topic
  LegislativeYuanMember
  Speech
  CommitteeMember
  RelatedTopics
  RelatedArticles
}

input ImportRecordWhereUniqueInput {
  id: ID
}

input ImportRecordWhereInput {
  AND: [ImportRecordWhereInput!]
  OR: [ImportRecordWhereInput!]
  NOT: [ImportRecordWhereInput!]
  id: IDFilter
  recordName: StringFilter
  uploadData: UploaderFilter
  recordCount: IntNullableFilter
  importer: SystemUserWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input UploaderFilter {
  equals: UploaderInput
}

input UploaderInput {
  listName: ListNameEnum
  csvData: JSON
}

enum ListNameEnum {
  Legislator
  Topic
  LegislativeYuanMember
  Speech
  CommitteeMember
  RelatedTopics
  RelatedArticles
}

input ImportRecordOrderByInput {
  id: OrderDirection
  recordCount: OrderDirection
}

input ImportRecordUpdateInput {
  recordName: String
  uploadData: UploaderInput
  recordCount: Int
  importer: SystemUserRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SystemUserRelateToOneForUpdateInput {
  create: SystemUserCreateInput
  connect: SystemUserWhereUniqueInput
  disconnect: Boolean
}

input ImportRecordUpdateArgs {
  where: ImportRecordWhereUniqueInput!
  data: ImportRecordUpdateInput!
}

input ImportRecordCreateInput {
  recordName: String
  uploadData: UploaderInput
  recordCount: Int
  importer: SystemUserRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SystemUserRelateToOneForCreateInput {
  create: SystemUserCreateInput
  connect: SystemUserWhereUniqueInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createSystemUser(data: SystemUserCreateInput!): SystemUser
  createSystemUsers(data: [SystemUserCreateInput!]!): [SystemUser]
  updateSystemUser(where: SystemUserWhereUniqueInput!, data: SystemUserUpdateInput!): SystemUser
  updateSystemUsers(data: [SystemUserUpdateArgs!]!): [SystemUser]
  deleteSystemUser(where: SystemUserWhereUniqueInput!): SystemUser
  deleteSystemUsers(where: [SystemUserWhereUniqueInput!]!): [SystemUser]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createSelected(data: SelectedCreateInput!): Selected
  createSelecteds(data: [SelectedCreateInput!]!): [Selected]
  updateSelected(where: SelectedWhereUniqueInput!, data: SelectedUpdateInput!): Selected
  updateSelecteds(data: [SelectedUpdateArgs!]!): [Selected]
  deleteSelected(where: SelectedWhereUniqueInput!): Selected
  deleteSelecteds(where: [SelectedWhereUniqueInput!]!): [Selected]
  createSpeech(data: SpeechCreateInput!): Speech
  createSpeeches(data: [SpeechCreateInput!]!): [Speech]
  updateSpeech(where: SpeechWhereUniqueInput!, data: SpeechUpdateInput!): Speech
  updateSpeeches(data: [SpeechUpdateArgs!]!): [Speech]
  deleteSpeech(where: SpeechWhereUniqueInput!): Speech
  deleteSpeeches(where: [SpeechWhereUniqueInput!]!): [Speech]
  createTopic(data: TopicCreateInput!): Topic
  createTopics(data: [TopicCreateInput!]!): [Topic]
  updateTopic(where: TopicWhereUniqueInput!, data: TopicUpdateInput!): Topic
  updateTopics(data: [TopicUpdateArgs!]!): [Topic]
  deleteTopic(where: TopicWhereUniqueInput!): Topic
  deleteTopics(where: [TopicWhereUniqueInput!]!): [Topic]
  createLegislator(data: LegislatorCreateInput!): Legislator
  createLegislators(data: [LegislatorCreateInput!]!): [Legislator]
  updateLegislator(where: LegislatorWhereUniqueInput!, data: LegislatorUpdateInput!): Legislator
  updateLegislators(data: [LegislatorUpdateArgs!]!): [Legislator]
  deleteLegislator(where: LegislatorWhereUniqueInput!): Legislator
  deleteLegislators(where: [LegislatorWhereUniqueInput!]!): [Legislator]
  createLegislativeYuanMember(data: LegislativeYuanMemberCreateInput!): LegislativeYuanMember
  createLegislativeYuanMembers(data: [LegislativeYuanMemberCreateInput!]!): [LegislativeYuanMember]
  updateLegislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!, data: LegislativeYuanMemberUpdateInput!): LegislativeYuanMember
  updateLegislativeYuanMembers(data: [LegislativeYuanMemberUpdateArgs!]!): [LegislativeYuanMember]
  deleteLegislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!): LegislativeYuanMember
  deleteLegislativeYuanMembers(where: [LegislativeYuanMemberWhereUniqueInput!]!): [LegislativeYuanMember]
  createParty(data: PartyCreateInput!): Party
  createParties(data: [PartyCreateInput!]!): [Party]
  updateParty(where: PartyWhereUniqueInput!, data: PartyUpdateInput!): Party
  updateParties(data: [PartyUpdateArgs!]!): [Party]
  deleteParty(where: PartyWhereUniqueInput!): Party
  deleteParties(where: [PartyWhereUniqueInput!]!): [Party]
  createLegislativeMeeting(data: LegislativeMeetingCreateInput!): LegislativeMeeting
  createLegislativeMeetings(data: [LegislativeMeetingCreateInput!]!): [LegislativeMeeting]
  updateLegislativeMeeting(where: LegislativeMeetingWhereUniqueInput!, data: LegislativeMeetingUpdateInput!): LegislativeMeeting
  updateLegislativeMeetings(data: [LegislativeMeetingUpdateArgs!]!): [LegislativeMeeting]
  deleteLegislativeMeeting(where: LegislativeMeetingWhereUniqueInput!): LegislativeMeeting
  deleteLegislativeMeetings(where: [LegislativeMeetingWhereUniqueInput!]!): [LegislativeMeeting]
  createLegislativeMeetingSession(data: LegislativeMeetingSessionCreateInput!): LegislativeMeetingSession
  createLegislativeMeetingSessions(data: [LegislativeMeetingSessionCreateInput!]!): [LegislativeMeetingSession]
  updateLegislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!, data: LegislativeMeetingSessionUpdateInput!): LegislativeMeetingSession
  updateLegislativeMeetingSessions(data: [LegislativeMeetingSessionUpdateArgs!]!): [LegislativeMeetingSession]
  deleteLegislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!): LegislativeMeetingSession
  deleteLegislativeMeetingSessions(where: [LegislativeMeetingSessionWhereUniqueInput!]!): [LegislativeMeetingSession]
  createCommittee(data: CommitteeCreateInput!): Committee
  createCommittees(data: [CommitteeCreateInput!]!): [Committee]
  updateCommittee(where: CommitteeWhereUniqueInput!, data: CommitteeUpdateInput!): Committee
  updateCommittees(data: [CommitteeUpdateArgs!]!): [Committee]
  deleteCommittee(where: CommitteeWhereUniqueInput!): Committee
  deleteCommittees(where: [CommitteeWhereUniqueInput!]!): [Committee]
  createCommitteeMember(data: CommitteeMemberCreateInput!): CommitteeMember
  createCommitteeMembers(data: [CommitteeMemberCreateInput!]!): [CommitteeMember]
  updateCommitteeMember(where: CommitteeMemberWhereUniqueInput!, data: CommitteeMemberUpdateInput!): CommitteeMember
  updateCommitteeMembers(data: [CommitteeMemberUpdateArgs!]!): [CommitteeMember]
  deleteCommitteeMember(where: CommitteeMemberWhereUniqueInput!): CommitteeMember
  deleteCommitteeMembers(where: [CommitteeMemberWhereUniqueInput!]!): [CommitteeMember]
  createImportRecord(data: ImportRecordCreateInput!): ImportRecord
  createImportRecords(data: [ImportRecordCreateInput!]!): [ImportRecord]
  updateImportRecord(where: ImportRecordWhereUniqueInput!, data: ImportRecordUpdateInput!): ImportRecord
  updateImportRecords(data: [ImportRecordUpdateArgs!]!): [ImportRecord]
  deleteImportRecord(where: ImportRecordWhereUniqueInput!): ImportRecord
  deleteImportRecords(where: [ImportRecordWhereUniqueInput!]!): [ImportRecord]
  endSession: Boolean!
  authenticateSystemUserWithPassword(email: String!, password: String!): SystemUserAuthenticationWithPasswordResult
  createInitialSystemUser(data: CreateInitialSystemUserInput!): SystemUserAuthenticationWithPasswordSuccess!
}

union SystemUserAuthenticationWithPasswordResult = SystemUserAuthenticationWithPasswordSuccess | SystemUserAuthenticationWithPasswordFailure

type SystemUserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: SystemUser!
}

type SystemUserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialSystemUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  systemUser(where: SystemUserWhereUniqueInput!): SystemUser
  systemUsers(where: SystemUserWhereInput! = {}, orderBy: [SystemUserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SystemUserWhereUniqueInput): [SystemUser!]
  systemUsersCount(where: SystemUserWhereInput! = {}): Int
  photo(where: PhotoWhereUniqueInput!): Photo
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photosCount(where: PhotoWhereInput! = {}): Int
  selected(where: SelectedWhereUniqueInput!): Selected
  selecteds(where: SelectedWhereInput! = {}, orderBy: [SelectedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SelectedWhereUniqueInput): [Selected!]
  selectedsCount(where: SelectedWhereInput! = {}): Int
  speech(where: SpeechWhereUniqueInput!): Speech
  speeches(where: SpeechWhereInput! = {}, orderBy: [SpeechOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SpeechWhereUniqueInput): [Speech!]
  speechesCount(where: SpeechWhereInput! = {}): Int
  topic(where: TopicWhereUniqueInput!): Topic
  topics(where: TopicWhereInput! = {}, orderBy: [TopicOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TopicWhereUniqueInput): [Topic!]
  topicsCount(where: TopicWhereInput! = {}): Int
  legislator(where: LegislatorWhereUniqueInput!): Legislator
  legislators(where: LegislatorWhereInput! = {}, orderBy: [LegislatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislatorWhereUniqueInput): [Legislator!]
  legislatorsCount(where: LegislatorWhereInput! = {}): Int
  legislativeYuanMember(where: LegislativeYuanMemberWhereUniqueInput!): LegislativeYuanMember
  legislativeYuanMembers(where: LegislativeYuanMemberWhereInput! = {}, orderBy: [LegislativeYuanMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeYuanMemberWhereUniqueInput): [LegislativeYuanMember!]
  legislativeYuanMembersCount(where: LegislativeYuanMemberWhereInput! = {}): Int
  party(where: PartyWhereUniqueInput!): Party
  parties(where: PartyWhereInput! = {}, orderBy: [PartyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PartyWhereUniqueInput): [Party!]
  partiesCount(where: PartyWhereInput! = {}): Int
  legislativeMeeting(where: LegislativeMeetingWhereUniqueInput!): LegislativeMeeting
  legislativeMeetings(where: LegislativeMeetingWhereInput! = {}, orderBy: [LegislativeMeetingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeMeetingWhereUniqueInput): [LegislativeMeeting!]
  legislativeMeetingsCount(where: LegislativeMeetingWhereInput! = {}): Int
  legislativeMeetingSession(where: LegislativeMeetingSessionWhereUniqueInput!): LegislativeMeetingSession
  legislativeMeetingSessions(where: LegislativeMeetingSessionWhereInput! = {}, orderBy: [LegislativeMeetingSessionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: LegislativeMeetingSessionWhereUniqueInput): [LegislativeMeetingSession!]
  legislativeMeetingSessionsCount(where: LegislativeMeetingSessionWhereInput! = {}): Int
  committee(where: CommitteeWhereUniqueInput!): Committee
  committees(where: CommitteeWhereInput! = {}, orderBy: [CommitteeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeWhereUniqueInput): [Committee!]
  committeesCount(where: CommitteeWhereInput! = {}): Int
  committeeMember(where: CommitteeMemberWhereUniqueInput!): CommitteeMember
  committeeMembers(where: CommitteeMemberWhereInput! = {}, orderBy: [CommitteeMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CommitteeMemberWhereUniqueInput): [CommitteeMember!]
  committeeMembersCount(where: CommitteeMemberWhereInput! = {}): Int
  importRecord(where: ImportRecordWhereUniqueInput!): ImportRecord
  importRecords(where: ImportRecordWhereInput! = {}, orderBy: [ImportRecordOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImportRecordWhereUniqueInput): [ImportRecord!]
  importRecordsCount(where: ImportRecordWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem

  """Get top N topic of a legislator order by speech cound desc"""
  topNTopicsOfLegislators(legislatorIds: [Int!]!, meetingId: Int!, sessionIds: [Int] = [], take: Int = 10): [LegislatorWIthTopTopics]

  """Get topics order by speech count desc"""
  topicsOrderBySpeechCount(meetingId: Int!, sessionIds: [Int] = [], partyIds: [Int] = [], take: Int = 10, skip: Int = 0): [TopicWithSpeechCountAndLegislators]
}

union AuthenticatedItem = SystemUser

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}

"""custom type for topNTopicsOfLegislators"""
type TopicWithSpeechCount {
  title: String!
  slug: String!
  name: String!
  count: Int!
}

type LegislatorWIthTopTopics {
  id: Int!
  topics: [TopicWithSpeechCount]
}

"""custom type for topicsOrderBySpeechCount"""
type ImageFileWithUrlOnly {
  url: String!
}

type CustomImage {
  imageFile: ImageFileWithUrlOnly!
}

type LegislatorForTopic {
  id: Int!
  name: String!
  party: Int
  count: Int
  slug: String!
  imageLink: String
  image: CustomImage
}

type TopicWithSpeechCountAndLegislators {
  title: String!
  slug: String!
  speechCount: Int!
  legislatorCount: Int!
  legislators: [LegislatorForTopic]
}
